export const getFormattedDate = (d) => {
  if (!d) {
    return null;
  }
  const date = new Date(d);
  return `${[date.getMonth() + 1, date.getDate(), date.getFullYear()].join(
    '/',
  )}`;
};

export const getFormattedTime = (d) => {
  if (!d) {
    return null;
  }
  const date = new Date(d);
  return `${[date.getHours() % 12 || 12, date.getMinutes()].join(':')} ${
    date.getHours() >= 12 ? 'PM' : 'AM'
  }`;
};

export const getRandomArbitrary = (min, max) => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

export const isLink = (link) => {
  // eslint-disable-next-line no-useless-escape
  return /[(http(s)?):\/\/(www\.)?a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$/i.test(
    link,
  );
};

export const computeDistanceBetween = (from, to) => {
  return window.google.maps.geometry.spherical.computeDistanceBetween(
    new window.google.maps.LatLng(from.lat, from.lng),
    new window.google.maps.LatLng(to.lat, to.lng),
  );
};

export const calcFullDistance = (directions) => {
  const { legs } = directions.routes[0];
  return legs.reduce((acc, leg) => acc + leg.distance.value, 0);
};

export const getVisitedStations = (stations, distance) => {
  return stations.filter((station) => station.distance <= distance);
};

export const busIconPath =
  'm21.5645137 121.876649c-6.9017473-1.230606-12.10671956-6.46753-13.29605721-13.391592-.23427859-1.38887-.29210053-3.551815-.29210053-10.4160209v-8.6903317l-1.18933766-.4169655c-3.25597382-1.1108934-5.81010883-4.0671889-6.53088931-7.5388577-.44861857-2.2025111-.83841825-2.0036663 3.72353405-2.0036663 3.04130154 0 4.36688631 0 3.97675431 0l.05881888-44.1435291c.05881888-21.3474154.07776055-21.6061166.48749884-23.0741192 1.65689793-5.93186661 5.67352943-10.03862155 11.46369963-11.74503505 1.5402571-.45653155 1.7157168-.45653155 11.0150811-.45653155 9.1827234 0 9.4947626.01927578 10.9572591.43624126 5.907808 1.74597956 10.0012031 5.99172301 11.600279 12.00373634.3120392 1.1311837.3309808 3.2931142.3897997 22.8357082l.0777606 44.1435291h3.9966929 3.9966929l-.1166408.9526292c-.5652594 4.146321-3.0605755 7.3410274-6.706349 8.5909093l-1.1893377.4169655v8.4914869c0 4.9001052-.0976992 9.1661392-.21434 10.0589122-.8583568 6.448254-5.3026714 11.626337-11.6780396 13.570146-1.4236162.436242-1.754597.456532-10.5275822.496098-4.9926261.019276-9.4957596-.040581-10.003197-.119713zm15.3710992-26.2713757c3.7516327-.5125479 7.368896-1.5029742 9.8449931-2.6939219.6280309-.3110894 1.1810875-.5865722 1.219394-.6231158.0191413-.0187404-.8192069-2.584291-1.8853989-5.6623896l-1.9425142-5.625846-.7039789.1096309c-6.2842038 1.0082296-19.6510385 1.0082296-25.9352423 0l-.7049526-.1096309-1.9425142 5.625846c-1.066192 3.0780986-1.9045402 5.6436492-1.8853989 5.6623896.0383065.0365436.5903894.3120264 1.219394.6231158 3.2180499 1.5395178 7.7311092 2.584291 13.2344127 3.041555 1.6367751.1471115 7.539292-.0730873 9.4818062-.3476331zm5.9569908-41.6052733c.260192 0-.0392617-7.7409524 0-7.8327159.0778579-.2230455-23.9709352-.2230455-23.8926037 0 .0263024.0611757.0263024 2.672081 0 7.8327159zm0-13c.260192 0-.0392617-7.7409524 0-7.8327159.0778579-.2230455-23.9709352-.2230455-23.8926037 0 .0263024.0611757.0263024 2.672081 0 7.8327159zm0 26c.260192 0-.0392617-7.7409524 0-7.8327159.0778579-.2230455-23.9709352-.2230455-23.8926037 0 .0263024.0611757.0263024 2.672081 0 7.8327159zm-19.7372272-46.1897305c4.7945654-.4244744 12.5268164-.31 17.3887164.2615364.7432698.0977628 1.5029417.1637736 1.7049453.1637736.3375361 0 .540403-.4578976 2.0260794-4.771159.8952043-2.6312399 1.6712782-4.8856334 1.7222107-5.0001078.1010018-.278248-2.6838862-1.53579518-4.5916985-2.07557955-3.5954924-.99684636-6.6514451-1.38873315-10.9056076-1.38873315s-7.3101152.39188679-10.9056076 1.38873315c-1.9078123.53894879-4.6935636 1.79733155-4.5916985 2.07557955.0509326.1144744.8270064 2.3697035 1.7386127 5.0168194l1.6540128 4.8045822 1.0298733-.1144744c.5559417-.0668464 2.2444851-.23062 3.7301616-.3609704z';
